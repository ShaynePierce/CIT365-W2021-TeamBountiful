// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMeetingManager.Data;

namespace MyMeetingManager.Migrations
{
    [DbContext(typeof(MeetingContext))]
    [Migration("20210326034135_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyMeetingManager.Models.Hymn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("Hymns");
                });

            modelBuilder.Entity("MyMeetingManager.Models.Meeting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Announcments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChoristerID")
                        .HasColumnType("int");

                    b.Property<int?>("ClosingHymnID")
                        .HasColumnType("int");

                    b.Property<int?>("ClosingPrayerMemberID")
                        .HasColumnType("int");

                    b.Property<int?>("ConductingLeaderID")
                        .HasColumnType("int");

                    b.Property<bool>("FastAndTestimonyMeeting")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OpeningHymnID")
                        .HasColumnType("int");

                    b.Property<int?>("OpeningPrayerMemberID")
                        .HasColumnType("int");

                    b.Property<int?>("OptionalRestHymnMemberID")
                        .HasColumnType("int");

                    b.Property<string>("OptionalRestHymnTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("OrganistID")
                        .HasColumnType("int");

                    b.Property<int?>("PresidingID")
                        .HasColumnType("int");

                    b.Property<int?>("SacramentHymnID")
                        .HasColumnType("int");

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ChoristerID");

                    b.HasIndex("ClosingHymnID");

                    b.HasIndex("ClosingPrayerMemberID");

                    b.HasIndex("ConductingLeaderID");

                    b.HasIndex("OpeningHymnID");

                    b.HasIndex("OpeningPrayerMemberID");

                    b.HasIndex("OptionalRestHymnMemberID");

                    b.HasIndex("OrganistID");

                    b.HasIndex("PresidingID");

                    b.HasIndex("SacramentHymnID");

                    b.HasIndex("WardID");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("MyMeetingManager.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Salutation")
                        .HasColumnType("int");

                    b.Property<bool>("isLeader")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MyMeetingManager.Models.Speaker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MeetingID")
                        .HasColumnType("int");

                    b.Property<int?>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("MeetingID");

                    b.HasIndex("MemberID");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("MyMeetingManager.Models.Ward", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("MyMeetingManager.Models.Meeting", b =>
                {
                    b.HasOne("MyMeetingManager.Models.Member", "Chorister")
                        .WithMany()
                        .HasForeignKey("ChoristerID");

                    b.HasOne("MyMeetingManager.Models.Hymn", "ClosingHymn")
                        .WithMany()
                        .HasForeignKey("ClosingHymnID");

                    b.HasOne("MyMeetingManager.Models.Member", "ClosingPrayerMember")
                        .WithMany()
                        .HasForeignKey("ClosingPrayerMemberID");

                    b.HasOne("MyMeetingManager.Models.Member", "ConductingLeader")
                        .WithMany()
                        .HasForeignKey("ConductingLeaderID");

                    b.HasOne("MyMeetingManager.Models.Hymn", "OpeningHymn")
                        .WithMany()
                        .HasForeignKey("OpeningHymnID");

                    b.HasOne("MyMeetingManager.Models.Member", "OpeningPrayerMember")
                        .WithMany()
                        .HasForeignKey("OpeningPrayerMemberID");

                    b.HasOne("MyMeetingManager.Models.Member", "OptionalRestHymnMember")
                        .WithMany()
                        .HasForeignKey("OptionalRestHymnMemberID");

                    b.HasOne("MyMeetingManager.Models.Member", "Organist")
                        .WithMany()
                        .HasForeignKey("OrganistID");

                    b.HasOne("MyMeetingManager.Models.Member", "Presiding")
                        .WithMany()
                        .HasForeignKey("PresidingID");

                    b.HasOne("MyMeetingManager.Models.Hymn", "SacramentHymn")
                        .WithMany()
                        .HasForeignKey("SacramentHymnID");

                    b.HasOne("MyMeetingManager.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID");

                    b.Navigation("Chorister");

                    b.Navigation("ClosingHymn");

                    b.Navigation("ClosingPrayerMember");

                    b.Navigation("ConductingLeader");

                    b.Navigation("OpeningHymn");

                    b.Navigation("OpeningPrayerMember");

                    b.Navigation("OptionalRestHymnMember");

                    b.Navigation("Organist");

                    b.Navigation("Presiding");

                    b.Navigation("SacramentHymn");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("MyMeetingManager.Models.Speaker", b =>
                {
                    b.HasOne("MyMeetingManager.Models.Meeting", "Meeting")
                        .WithMany("Speakers")
                        .HasForeignKey("MeetingID");

                    b.HasOne("MyMeetingManager.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID");

                    b.Navigation("Meeting");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MyMeetingManager.Models.Meeting", b =>
                {
                    b.Navigation("Speakers");
                });
#pragma warning restore 612, 618
        }
    }
}
